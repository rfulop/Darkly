1 - 
Web Parameter Tampering 1
page: /index.php?page=recover
En inspectant la page ?page=recover, on remarque qu'elle ne contient qu'un unique bouton submit.
On inspecte la request POST, qui contient un champs 'mail' avec pour valeur 'webmaster@borntosec.com'.
L'inspection du HTML permet de decouvrir le champs en `hidden`:
```
<input name="mail" value="webmaster@borntosec.com" maxlength="15" type="hidden">
```

En modifiant la valeur du champs `mail` avant l'envoie de la requete, on peut alors envoyer des courriels a n'importe quel adresse email depuis l'application web.

Scenario d'attaque:
Mail bombing depuis l'application web.

Fix:
- Mettre en place une politique interne afin d'appliquer le principe de base en securite web: Don't trust user input
- Gerer les parametres sensibles et non necessaire a l'experience utilisateur cote back.

2 - 
Open redirect
page: /index.php
En bas de la page, on remarque des liens vers les reseaux sociaux dont la redirection est assure par une champs 'redirect' dans une requete GET.
En modifiant la valeur de ce champs on est en mesure de rediriger un utilisateur vers une url.

Scenario d'attaque:
Une attaque par hameconnage dans laquelle un attaquant usurperait un site web. Si les utilisateurs ne font pas attention a la barre d'url ils peuvent saisir leurs indentifiants sur un site web malveillant imitant un site legimite, et les communiquer a un attaquant.

Fix:
- Ne pas utiliser de redirection.
- Une methode de validation si on choisit tout de meme d'utiliser une requete de redirection.
- Creer une liste d'URL de confiance.
- Forcer toutes les redirections partant de l'application Web a passer par une page informant les utilisateurs qu'ils quittent le site et leur demander de confirmer l'action.


3- Referer / User-Agent spoofing
Page: /index.php?page=e43ad1fdc54babe674da7c7b8f0127bde61de3fbe01def7d00f151c2fcca6d1c

En inspectant le code source de la page on tombe sur les informations:
```
'You must cumming from : "https://www.nsa.gov/" to go to the next step'
```
et
```
Let's use this browser : "ft_bornToSec". It will help you a lot.
```
En suivant les indications laissees pour nous, on forge une requete GET avec les User-Agent et le Referer correspondant.

Scenario d'attaque:
Il ne s'agit pas d'une vulnerabilite.
Dans certains cas, modifier les headers des paquets HTTP permet d'acceder a d'autres vulnerabilite cote serveur, comme les Cross-Site Request Forgery ou encore les XSS.

Fix:
On ne peut pas securiser certains headers HTTP. Si on souhaite filtrer l'origine des paquets HTTP on pet utiliser un systeme de token ou une verification sur des id de session.
Ne pas ecrire des informations sensibles en commentaires dans le code.
Utilser les Security Headers definies par l'OWASP:
```
X-Frame-Options: SAMEORIGIN [1]
X-XSS-Protection: 1; mode=block [2]
X-Content-Type-Options: nosniff
Content-Type: text/html; charset=utf-8
```

4- SQL injection 1
page: /index.php?page=searchimg

5- SQL injection 2 
page: /index.php?page=member

6- Security Misconfiguration
page: /robots.txt
Un fichier `robots.txt` contenant des commandes a destination des robots d'indexation des moteurs de recherche est parfois present a la racine des applications web.
C'est le cas ici. 
Robots.txt nous indique deux routes a excluere de l'indexaction. La route `/whatever` contient un fichier nomme htpasswd qui contient un couple d'identifiant mot de passe:
root:8621ffdbc5698829397d97767ac13db3
Le mot de passe contient 32 characteres, characteristique des hash md5.
En utilisant une rainbow table publique, on retrouve la chaine de charactere a l'origine du md5: `shadow`.
On se connecte a l'application web avec les identifiants root.

Scenario d'attaque:
Une fois qu'on a acces a l'interface d'administration d'une application web, on peut tout imaginer..

Fix:

- Ne pas utiliser md5 qui n'est plus considere comme sur depuis l'ete 2004
- Ne pas entrer ses identifiants dans des fichiers (utiliser des gestionnaires de mot de passe Open Source comme Keypass)
- Si on souhaite tout de meme utiliser un fichier .htpasswd, il faut utiliser un fichier .htaccess avec d'empecher l'acces a certains fichiers.
Il contiendrait au minimum ce code:
```
AuthName "Page d'administration protégée"
AuthType Basic
AuthUserFile "/PATH/.htpasswd"
Require valid-user
```

7- Web Parameter Tampering 2
page: /index.php?page=survey

8- Stocked XSS:
page: /index.php?page=feedback

9 - Reflected XSS:
page: /index.php?page=media

10 - Broken Access Control
page: Toutes / cookie

11 - Broken Authentification
page: /index.php?page=signin

12 - Forced browsing

13 - Path traversal

14 - Unrestricted File Upload
page: /index.php?upload
